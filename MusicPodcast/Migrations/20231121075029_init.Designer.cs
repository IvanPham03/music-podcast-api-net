// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicPodcast.Data;

#nullable disable

namespace MusicPodcast.Migrations
{
    [DbContext(typeof(MusicPodcastDbContext))]
    [Migration("20231121075029_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MusicPodcast.Models.Album", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("albumTrackId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("albumType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updateOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("albumTrackId");

                    b.ToTable("Album");
                });

            modelBuilder.Entity("MusicPodcast.Models.AlbumTrack", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("updateOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("AlbumTrack");
                });

            modelBuilder.Entity("MusicPodcast.Models.ArtistTrack", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("updateOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("ArtistTrack");
                });

            modelBuilder.Entity("MusicPodcast.Models.Playlist", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("playlistTrackId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("playlistUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("updateOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("playlistTrackId");

                    b.HasIndex("playlistUserId");

                    b.ToTable("Playlist");
                });

            modelBuilder.Entity("MusicPodcast.Models.PlaylistTrack", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isOwner")
                        .HasColumnType("bit");

                    b.Property<DateTime>("updateOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("PlaylistTrack");
                });

            modelBuilder.Entity("MusicPodcast.Models.Track", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("albumTrackId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("artistTrackId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("trackPlaylistId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updateOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("albumTrackId");

                    b.HasIndex("artistTrackId");

                    b.HasIndex("trackPlaylistId");

                    b.ToTable("Track");

                    b.HasData(
                        new
                        {
                            ID = "f80b6678-270d-4aed-9496-b7c972da5f0b",
                            createAt = new DateTime(2023, 11, 21, 14, 50, 29, 854, DateTimeKind.Local).AddTicks(3940),
                            genre = "nhạc trẻ",
                            name = "Anh Đã Yên Bình Tôi Biết Thương Mình",
                            updateOn = new DateTime(2023, 11, 21, 14, 50, 29, 854, DateTimeKind.Local).AddTicks(3940),
                            url = "AnhDaYenBinhToiBietThuongMinh-PhamQuynhAnh-9010380.mp3"
                        },
                        new
                        {
                            ID = "30e3de05-5afb-4d64-b266-a6d1574f05ad",
                            createAt = new DateTime(2023, 11, 21, 14, 50, 29, 854, DateTimeKind.Local).AddTicks(3950),
                            genre = "nhạc trẻ",
                            name = "Anh sẽ đưa em về",
                            updateOn = new DateTime(2023, 11, 21, 14, 50, 29, 854, DateTimeKind.Local).AddTicks(3950),
                            url = "AnhSeDuaEmVe-NQP-6309479.mp3"
                        });
                });

            modelBuilder.Entity("MusicPodcast.Models.User", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("artistTrackId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pathImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("trackId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("updateOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userPlayslistId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("artistTrackId");

                    b.HasIndex("trackId");

                    b.HasIndex("userPlayslistId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            ID = "ff9ead90-0b66-4bcf-be59-703aaac5dfe7",
                            createAt = new DateTime(2023, 11, 21, 14, 50, 29, 854, DateTimeKind.Local).AddTicks(3810),
                            email = "truong@gmail.com",
                            password = "admin",
                            role = "user",
                            updateOn = new DateTime(2023, 11, 21, 14, 50, 29, 854, DateTimeKind.Local).AddTicks(3840),
                            userName = "truong"
                        },
                        new
                        {
                            ID = "d2ae1f58-7545-4a4d-8995-b3132e323ac6",
                            createAt = new DateTime(2023, 11, 21, 14, 50, 29, 854, DateTimeKind.Local).AddTicks(3850),
                            email = "truong2@gmail.com",
                            password = "admin2",
                            role = "amdin",
                            updateOn = new DateTime(2023, 11, 21, 14, 50, 29, 854, DateTimeKind.Local).AddTicks(3850),
                            userName = "truong2"
                        });
                });

            modelBuilder.Entity("MusicPodcast.Models.UserPlaylist", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("updateOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("UserPlaylist");
                });

            modelBuilder.Entity("MusicPodcast.Models.Album", b =>
                {
                    b.HasOne("MusicPodcast.Models.AlbumTrack", "albumTrack")
                        .WithMany("albums")
                        .HasForeignKey("albumTrackId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("albumTrack");
                });

            modelBuilder.Entity("MusicPodcast.Models.Playlist", b =>
                {
                    b.HasOne("MusicPodcast.Models.PlaylistTrack", "playlistTrack")
                        .WithMany("playlists")
                        .HasForeignKey("playlistTrackId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MusicPodcast.Models.UserPlaylist", "UserPlaylists")
                        .WithMany("playlists")
                        .HasForeignKey("playlistUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("UserPlaylists");

                    b.Navigation("playlistTrack");
                });

            modelBuilder.Entity("MusicPodcast.Models.Track", b =>
                {
                    b.HasOne("MusicPodcast.Models.AlbumTrack", "albumTrack")
                        .WithMany("tracks")
                        .HasForeignKey("albumTrackId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MusicPodcast.Models.ArtistTrack", "artistTrack")
                        .WithMany("tracks")
                        .HasForeignKey("artistTrackId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MusicPodcast.Models.PlaylistTrack", "playlistTrack")
                        .WithMany("tracks")
                        .HasForeignKey("trackPlaylistId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("albumTrack");

                    b.Navigation("artistTrack");

                    b.Navigation("playlistTrack");
                });

            modelBuilder.Entity("MusicPodcast.Models.User", b =>
                {
                    b.HasOne("MusicPodcast.Models.ArtistTrack", "artistTrack")
                        .WithMany("users")
                        .HasForeignKey("artistTrackId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MusicPodcast.Models.Track", "tracks")
                        .WithMany("users")
                        .HasForeignKey("trackId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MusicPodcast.Models.UserPlaylist", "userPlaylists")
                        .WithMany("users")
                        .HasForeignKey("userPlayslistId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("artistTrack");

                    b.Navigation("tracks");

                    b.Navigation("userPlaylists");
                });

            modelBuilder.Entity("MusicPodcast.Models.AlbumTrack", b =>
                {
                    b.Navigation("albums");

                    b.Navigation("tracks");
                });

            modelBuilder.Entity("MusicPodcast.Models.ArtistTrack", b =>
                {
                    b.Navigation("tracks");

                    b.Navigation("users");
                });

            modelBuilder.Entity("MusicPodcast.Models.PlaylistTrack", b =>
                {
                    b.Navigation("playlists");

                    b.Navigation("tracks");
                });

            modelBuilder.Entity("MusicPodcast.Models.Track", b =>
                {
                    b.Navigation("users");
                });

            modelBuilder.Entity("MusicPodcast.Models.UserPlaylist", b =>
                {
                    b.Navigation("playlists");

                    b.Navigation("users");
                });
#pragma warning restore 612, 618
        }
    }
}
